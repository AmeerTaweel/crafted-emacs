#+title: Example Rational Emacs User Configuration File
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el :mkdirp yes

Rational Emacs supports user customization through a =config.org= file similar to
this one.

To get you started, copy both example files to your Rational Emacs configuration
directory, e.g.:
- copy =examples/example-config.el= to =~/.rational-emacs/config.el=
- copy =examples/example-config.org= to =~/.rational-emacs/config.org=
- restart Emacs

After that, whenever you edit =config.org= in Emacs and save it, it updates
=config.el= in the same directory.

See the [[https://orgmode.org/manual/Extracting-Source-Code.html][Org Manual]] for details and alternatives.

#+begin_src emacs-lisp
  ;;; config.el -- Example Rational Emacs user customization file -*- lexical-binding: t; -*-
  ;; This file is generated from config.org. If you want to edit the
  ;; configuration, DO NOT edit config.el, edit config.org, instead.

  ;; Tangle the code blocks to config.el on save.
  (defun org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "config.org" rational-config-path))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src

In your configuration you can set any Emacs configuration variable, face
attributes, themes, etc as you normally would.
See the README.org file in this repository for additional information.

* Rational Modules

At the moment, Rational Emacs offers the following modules. Comment out
everything you don't want to use.
At the very least, you should decide whether or not you want to use [[https://github.com/emacs-evil/evil][evil-mode]],
as it will greatly change how you interact with Emacs. So, if you prefer
Vim-style keybindings over vanilla Emacs keybindings remove the comment
in the line about =rational-evil= below.
#+begin_src emacs-lisp
  (require 'rational-defaults)    ; Sensible default settings for Emacs
  (require 'rational-use-package) ; Configuration for `use-package`
  (require 'rational-updates)     ; Tools to upgrade Rational Emacs
  (require 'rational-completion)  ; selection framework based on `vertico`
  (require 'rational-ui)          ; Better UI experience (modeline etc.)
  (require 'rational-windows)     ; Window management configuration
  (require 'rational-editing)     ; Whitspace trimming, auto parens etc.
  ;(require 'rational-evil)        ; An `evil-mode` configuration
  (require 'rational-org)         ; org-appear, clickable hyperlinks etc.
  (require 'rational-project)     ; built-in alternative to projectile
  (require 'rational-speedbar)    ; built-in file-tree
  (require 'rational-screencast)  ; show current command and binding in modeline
  (require 'rational-compile)     ; automatically compile some emacs lisp files
#+end_src

* Font and theme settings

** Font settings

Set the default face. The default face is the basis for most other
faces used in Emacs. A "face" is a configuration including font,
font size, foreground and background colors and other attributes.
The fixed-pitch and fixed-pitch-serif faces are monospace faces
generally used as the default face for code. The variable-pitch
face is used when `variable-pitch-mode' is turned on, generally
whenever a non-monospace face is preferred.

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (custom-set-faces
               `(default ((t (:font "JetBrains Mono Light 18"))))
               `(fixed-pitch ((t (:inherit (default)))))
               `(fixed-pitch-serif ((t (:inherit (default)))))
               `(variable-pitch ((t (:font "Arial 18")))))))
#+end_src

** Theme settings

Themes are color customization packages which coordinate the
various colors, and in some cases, font-sizes for various aspects
of text editing within Emacs, toolbars, tabbars and
modeline. Several themes are built-in to Emacs, by default,
Rational Emacs uses the `deeper-blue' theme. Here is an example of
loading a different theme from the venerable Doom Emacs project.


#+begin_src emacs-lisp
  (rational-package-install-package 'doom-themes)
  (progn
    (disable-theme 'deeper-blue)          ; first turn off the deeper-blue theme
    (load-theme 'doom-palenight t))       ; load the doom-palenight theme
#+end_src

* Custom.el
By default, Rational Emacs keeps your config file clean. All the customization
settings that Emacs normally automatically adds to your config.el go into
the file =custom.el= instead. If you don't want this, set the respective
variable to =nil=:
#+begin_src emacs-lisp
  ;; To not load `custom.el' after `config.el', uncomment this line.
  ;; (setq rational-load-custom-file nil)
#+end_src

* Tangling to early-config.el
If you need to make settings to =early-config.el=, you can do that from here, too.
Just begin the source code block with:
#+begin_src org
  ,#+begin_src emacs-lisp :tangle ./early-config.el
#+end_src
